type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

enum Sort {
  asc
  desc
}

type Item {
  name: String!
}

type Stat {
  name: String!
  baseStat: Int!
}

type Sprites {
  backDefault: String
  backFemale: String
  backShiny: String
  backShinyFemale: String
  frontDefault: String
  frontFemale: String
  frontShiny: String
  frontShinyFemale: String
}

type GrowthRateExperienceLevel {
  level: Int
  experience: Int
}

type PokemonGrowthRate {
  id: ID
  name: String
  formula: String
  levels: [GrowthRateExperienceLevel]
}

type PokemonSpecies {
  id: ID
  name: String
  growthRate: PokemonGrowthRate
}

type PokemonNode {
  id: ID
  name: String!
  baseExperience: Int
  height: Int
  order: Int
  weight: Int
  abilities: [Item]
  heldItems: [Item]
  moves: [Item]
  sprites: Sprites
  stats: [Stat]
  types: [Item]
  species: PokemonSpecies
}

type PokemonEdge {
  cursor: String!
  node: PokemonNode
}

type PokemonConnection {
  totalCount: Int!
  edges: [PokemonEdge]!
  pageInfo: PageInfo!
}

input StringFilterInput {
  contains: String
}

input PokemonFilterInput {
  name: StringFilterInput
  species: String
  type: String
}

input PokemonSortInput {
  order: Sort
  name: Sort
}

type Query {
  getPokemon(id: ID!): PokemonNode
  listPokemon(
    filter: PokemonFilterInput
    sort: PokemonSortInput
    first: Int
    after: String
  ): PokemonConnection
}
